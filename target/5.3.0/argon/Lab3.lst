
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/Lab3/target/5.3.0/argon/Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ab0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5ad0  000b5ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000078  2003e628  000b5af4  0000e628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000150  2003e6a0  2003e6a0  0001e6a0  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b5b6c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b5b70  000b5b70  00015b70  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b5b76  000b5b76  00015b76  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5b9a  000b5b9a  00015b9a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f2e25  00000000  00000000  00015b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f406  00000000  00000000  001089c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032a50  00000000  00000000  00117dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002660  00000000  00000000  0014a819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009810  00000000  00000000  0014ce79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000344f4  00000000  00000000  00156689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003404e  00000000  00000000  0018ab7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001352aa  00000000  00000000  001bebcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006bb4  00000000  00000000  002f3e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__aeabi_d2iz>:
   b47bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b47c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b47c4:	d215      	bcs.n	b47f2 <__aeabi_d2iz+0x36>
   b47c6:	d511      	bpl.n	b47ec <__aeabi_d2iz+0x30>
   b47c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b47cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b47d0:	d912      	bls.n	b47f8 <__aeabi_d2iz+0x3c>
   b47d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b47d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b47da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b47de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b47e2:	fa23 f002 	lsr.w	r0, r3, r2
   b47e6:	bf18      	it	ne
   b47e8:	4240      	negne	r0, r0
   b47ea:	4770      	bx	lr
   b47ec:	f04f 0000 	mov.w	r0, #0
   b47f0:	4770      	bx	lr
   b47f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b47f6:	d105      	bne.n	b4804 <__aeabi_d2iz+0x48>
   b47f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b47fc:	bf08      	it	eq
   b47fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4802:	4770      	bx	lr
   b4804:	f04f 0000 	mov.w	r0, #0
   b4808:	4770      	bx	lr
   b480a:	bf00      	nop

000b480c <strlen>:
   b480c:	4603      	mov	r3, r0
   b480e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4812:	2a00      	cmp	r2, #0
   b4814:	d1fb      	bne.n	b480e <strlen+0x2>
   b4816:	1a18      	subs	r0, r3, r0
   b4818:	3801      	subs	r0, #1
   b481a:	4770      	bx	lr

000b481c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b481c:	4809      	ldr	r0, [pc, #36]	; (b4844 <module_user_pre_init+0x28>)
   b481e:	490a      	ldr	r1, [pc, #40]	; (b4848 <module_user_pre_init+0x2c>)
   b4820:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4822:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4824:	d005      	beq.n	b4832 <module_user_pre_init+0x16>
   b4826:	4a09      	ldr	r2, [pc, #36]	; (b484c <module_user_pre_init+0x30>)
   b4828:	4282      	cmp	r2, r0
   b482a:	d002      	beq.n	b4832 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b482c:	1a12      	subs	r2, r2, r0
   b482e:	f000 ff85 	bl	b573c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4832:	4807      	ldr	r0, [pc, #28]	; (b4850 <module_user_pre_init+0x34>)
   b4834:	4a07      	ldr	r2, [pc, #28]	; (b4854 <module_user_pre_init+0x38>)
   b4836:	2100      	movs	r1, #0
   b4838:	1a12      	subs	r2, r2, r0
   b483a:	f000 ff8d 	bl	b5758 <memset>
    return &link_global_data_start;
}
   b483e:	4801      	ldr	r0, [pc, #4]	; (b4844 <module_user_pre_init+0x28>)
   b4840:	bd08      	pop	{r3, pc}
   b4842:	bf00      	nop
   b4844:	2003e628 	.word	0x2003e628
   b4848:	000b5af4 	.word	0x000b5af4
   b484c:	2003e6a0 	.word	0x2003e6a0
   b4850:	2003e6a0 	.word	0x2003e6a0
   b4854:	2003e7f0 	.word	0x2003e7f0

000b4858 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4858:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b485a:	4e07      	ldr	r6, [pc, #28]	; (b4878 <module_user_init+0x20>)
   b485c:	4c07      	ldr	r4, [pc, #28]	; (b487c <module_user_init+0x24>)
    module_user_init_hook();
   b485e:	f000 fb91 	bl	b4f84 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4862:	1ba4      	subs	r4, r4, r6
   b4864:	08a4      	lsrs	r4, r4, #2
   b4866:	2500      	movs	r5, #0
   b4868:	42ac      	cmp	r4, r5
   b486a:	d100      	bne.n	b486e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b486c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b486e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4872:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4874:	3501      	adds	r5, #1
   b4876:	e7f7      	b.n	b4868 <module_user_init+0x10>
   b4878:	000b5aac 	.word	0x000b5aac
   b487c:	000b5ad0 	.word	0x000b5ad0

000b4880 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4880:	f000 b813 	b.w	b48aa <setup>

000b4884 <module_user_loop>:
}

void module_user_loop() {
   b4884:	b508      	push	{r3, lr}
    loop();
   b4886:	f000 f827 	bl	b48d8 <loop>
    _post_loop();
}
   b488a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b488e:	f000 bb31 	b.w	b4ef4 <_post_loop>

000b4892 <_Znaj>:
   b4892:	f000 ba29 	b.w	b4ce8 <malloc>

000b4896 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4896:	f000 ba2f 	b.w	b4cf8 <free>

000b489a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b489a:	7800      	ldrb	r0, [r0, #0]
   b489c:	fab0 f080 	clz	r0, r0
   b48a0:	0940      	lsrs	r0, r0, #5
   b48a2:	4770      	bx	lr

000b48a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b48a4:	2301      	movs	r3, #1
   b48a6:	7003      	strb	r3, [r0, #0]
   b48a8:	4770      	bx	lr

000b48aa <setup>:
int potentiometer;
int color_idx = 0;



void setup() {
   b48aa:	b508      	push	{r3, lr}

  //initialize pins
  pinMode(D7, OUTPUT);
   b48ac:	2101      	movs	r1, #1
   b48ae:	2007      	movs	r0, #7
   b48b0:	f000 fe5c 	bl	b556c <pinMode>
  pinMode(D6, OUTPUT);
   b48b4:	2101      	movs	r1, #1
   b48b6:	2006      	movs	r0, #6
   b48b8:	f000 fe58 	bl	b556c <pinMode>
  pinMode(D3, OUTPUT);
   b48bc:	2101      	movs	r1, #1
   b48be:	2003      	movs	r0, #3
   b48c0:	f000 fe54 	bl	b556c <pinMode>

  pinMode(D8, INPUT);
   b48c4:	2100      	movs	r1, #0
   b48c6:	2008      	movs	r0, #8
   b48c8:	f000 fe50 	bl	b556c <pinMode>
  pinMode(A5, INPUT);

}
   b48cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(A5, INPUT);
   b48d0:	2100      	movs	r1, #0
   b48d2:	200e      	movs	r0, #14
   b48d4:	f000 be4a 	b.w	b556c <pinMode>

000b48d8 <loop>:

void loop() {
   b48d8:	b538      	push	{r3, r4, r5, lr}

  //changes what color is being updated when the button is pressed
  if (digitalRead(D8)) {
   b48da:	2008      	movs	r0, #8
   b48dc:	f000 fe57 	bl	b558e <digitalRead>
   b48e0:	4d1d      	ldr	r5, [pc, #116]	; (b4958 <loop+0x80>)
   b48e2:	4b1e      	ldr	r3, [pc, #120]	; (b495c <loop+0x84>)
   b48e4:	b338      	cbz	r0, b4936 <loop+0x5e>
    button_pressed = true;
   b48e6:	2201      	movs	r2, #1
   b48e8:	701a      	strb	r2, [r3, #0]
    }
    button_pressed = false;
  }

  // updates current color intensity
  potentiometer = analogRead(A5);
   b48ea:	200e      	movs	r0, #14
   b48ec:	f000 fe62 	bl	b55b4 <analogRead>
  color[color_idx] = static_cast<float>(potentiometer)*(255.0/4095.0);
   b48f0:	ee07 0a90 	vmov	s15, r0
  potentiometer = analogRead(A5);
   b48f4:	4b1a      	ldr	r3, [pc, #104]	; (b4960 <loop+0x88>)
  color[color_idx] = static_cast<float>(potentiometer)*(255.0/4095.0);
   b48f6:	4c1b      	ldr	r4, [pc, #108]	; (b4964 <loop+0x8c>)
  potentiometer = analogRead(A5);
   b48f8:	6018      	str	r0, [r3, #0]
  color[color_idx] = static_cast<float>(potentiometer)*(255.0/4095.0);
   b48fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b48fe:	682d      	ldr	r5, [r5, #0]
   b4900:	ee17 0a90 	vmov	r0, s15
   b4904:	f7ff fcf0 	bl	b42e8 <__aeabi_f2d>
   b4908:	a311      	add	r3, pc, #68	; (adr r3, b4950 <loop+0x78>)
   b490a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b490e:	f7ff fd43 	bl	b4398 <__aeabi_dmul>
   b4912:	f7ff ff53 	bl	b47bc <__aeabi_d2iz>
   b4916:	f844 0025 	str.w	r0, [r4, r5, lsl #2]

  analogWrite(D7,color[0]); 
   b491a:	2007      	movs	r0, #7
   b491c:	6821      	ldr	r1, [r4, #0]
   b491e:	f000 fe60 	bl	b55e2 <_Z11analogWritetm>
  analogWrite(D6,color[1]); 
   b4922:	6861      	ldr	r1, [r4, #4]
   b4924:	2006      	movs	r0, #6
   b4926:	f000 fe5c 	bl	b55e2 <_Z11analogWritetm>
  analogWrite(D3,color[2]); 
   b492a:	68a1      	ldr	r1, [r4, #8]
   b492c:	2003      	movs	r0, #3

   b492e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  analogWrite(D3,color[2]); 
   b4932:	f000 be56 	b.w	b55e2 <_Z11analogWritetm>
  } else if (button_pressed) {
   b4936:	781a      	ldrb	r2, [r3, #0]
   b4938:	2a00      	cmp	r2, #0
   b493a:	d0d6      	beq.n	b48ea <loop+0x12>
    color_idx += 1;
   b493c:	6829      	ldr	r1, [r5, #0]
    button_pressed = false;
   b493e:	7018      	strb	r0, [r3, #0]
    color_idx += 1;
   b4940:	1c4a      	adds	r2, r1, #1
   b4942:	2902      	cmp	r1, #2
   b4944:	bf08      	it	eq
   b4946:	4602      	moveq	r2, r0
   b4948:	602a      	str	r2, [r5, #0]
    button_pressed = false;
   b494a:	e7ce      	b.n	b48ea <loop+0x12>
   b494c:	f3af 8000 	nop.w
   b4950:	1fe1fe20 	.word	0x1fe1fe20
   b4954:	3fafe1fe 	.word	0x3fafe1fe
   b4958:	2003e6b0 	.word	0x2003e6b0
   b495c:	2003e6ac 	.word	0x2003e6ac
   b4960:	2003e6b4 	.word	0x2003e6b4
   b4964:	2003e628 	.word	0x2003e628

000b4968 <_GLOBAL__sub_I_SystemMode>:
   b4968:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b496a:	4b07      	ldr	r3, [pc, #28]	; (b4988 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
   b496c:	4a07      	ldr	r2, [pc, #28]	; (b498c <_GLOBAL__sub_I_SystemMode+0x24>)
   b496e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4970:	2400      	movs	r4, #0
   b4972:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4976:	2003      	movs	r0, #3
   b4978:	f000 f92a 	bl	b4bd0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b497c:	4621      	mov	r1, r4
   b497e:	2001      	movs	r0, #1
   b4980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
   b4984:	f000 b92c 	b.w	b4be0 <system_thread_set_state>
   b4988:	2003e6a0 	.word	0x2003e6a0
   b498c:	ffff0000 	.word	0xffff0000

000b4990 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <netdb_freeaddrinfo+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	689b      	ldr	r3, [r3, #8]
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030268 	.word	0x00030268

000b49a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <netdb_getaddrinfo+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	68db      	ldr	r3, [r3, #12]
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	00030268 	.word	0x00030268

000b49b0 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <hal_pin_validate_function+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	685b      	ldr	r3, [r3, #4]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	0003022c 	.word	0x0003022c

000b49c0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <hal_gpio_mode+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	689b      	ldr	r3, [r3, #8]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	0003022c 	.word	0x0003022c

000b49d0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <hal_gpio_get_mode+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	68db      	ldr	r3, [r3, #12]
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	0003022c 	.word	0x0003022c

000b49e0 <hal_gpio_read>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <hal_gpio_read+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	695b      	ldr	r3, [r3, #20]
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	0003022c 	.word	0x0003022c

000b49f0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <HAL_DAC_Write+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	0003022c 	.word	0x0003022c

000b4a00 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <hal_adc_read+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	0003022c 	.word	0x0003022c

000b4a10 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <hal_pwm_write_ext+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	0003022c 	.word	0x0003022c

000b4a20 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <HAL_RNG_GetRandomNumber+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	685b      	ldr	r3, [r3, #4]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030218 	.word	0x00030218

000b4a30 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	695b      	ldr	r3, [r3, #20]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	00030218 	.word	0x00030218

000b4a40 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <os_mutex_recursive_create+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	00030248 	.word	0x00030248

000b4a50 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <inet_inet_ntop+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	695b      	ldr	r3, [r3, #20]
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	00030264 	.word	0x00030264

000b4a60 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <hal_usart_write+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	68db      	ldr	r3, [r3, #12]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	0003023c 	.word	0x0003023c

000b4a70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <hal_usart_available+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	691b      	ldr	r3, [r3, #16]
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	0003023c 	.word	0x0003023c

000b4a80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <hal_usart_read+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	695b      	ldr	r3, [r3, #20]
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	0003023c 	.word	0x0003023c

000b4a90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <hal_usart_peek+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	699b      	ldr	r3, [r3, #24]
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	0003023c 	.word	0x0003023c

000b4aa0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <hal_usart_flush+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	69db      	ldr	r3, [r3, #28]
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	0003023c 	.word	0x0003023c

000b4ab0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <hal_usart_is_enabled+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6a1b      	ldr	r3, [r3, #32]
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	0003023c 	.word	0x0003023c

000b4ac0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <hal_usart_available_data_for_write+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	0003023c 	.word	0x0003023c

000b4ad0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <hal_usart_init_ex+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	0003023c 	.word	0x0003023c

000b4ae0 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <hal_i2c_write+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	6a1b      	ldr	r3, [r3, #32]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	00030228 	.word	0x00030228

000b4af0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <hal_i2c_available+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	00030228 	.word	0x00030228

000b4b00 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <hal_i2c_read+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	00030228 	.word	0x00030228

000b4b10 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <hal_i2c_peek+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	00030228 	.word	0x00030228

000b4b20 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <hal_i2c_flush+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	00030228 	.word	0x00030228

000b4b30 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <hal_i2c_is_enabled+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	00030228 	.word	0x00030228

000b4b40 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <hal_i2c_init+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030228 	.word	0x00030228

000b4b50 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <hal_spi_init+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	69db      	ldr	r3, [r3, #28]
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030230 	.word	0x00030230

000b4b60 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <hal_spi_is_enabled+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	6a1b      	ldr	r3, [r3, #32]
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030230 	.word	0x00030230

000b4b70 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <HAL_USB_USART_Init+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	681b      	ldr	r3, [r3, #0]
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	0003024c 	.word	0x0003024c

000b4b80 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <HAL_USB_USART_Available_Data+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	691b      	ldr	r3, [r3, #16]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	0003024c 	.word	0x0003024c

000b4b90 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	695b      	ldr	r3, [r3, #20]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	0003024c 	.word	0x0003024c

000b4ba0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <HAL_USB_USART_Receive_Data+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	699b      	ldr	r3, [r3, #24]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	0003024c 	.word	0x0003024c

000b4bb0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <HAL_USB_USART_Send_Data+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	69db      	ldr	r3, [r3, #28]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	0003024c 	.word	0x0003024c

000b4bc0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <HAL_USB_USART_Flush_Data+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	6a1b      	ldr	r3, [r3, #32]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	0003024c 	.word	0x0003024c

000b4bd0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <set_system_mode+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	685b      	ldr	r3, [r3, #4]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	00030220 	.word	0x00030220

000b4be0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <system_thread_set_state+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	00030220 	.word	0x00030220

000b4bf0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b03      	ldr	r3, [pc, #12]	; (b4c00 <system_ctrl_set_app_request_handler+0x10>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4bfa:	9301      	str	r3, [sp, #4]
   b4bfc:	bd08      	pop	{r3, pc}
   b4bfe:	0000      	.short	0x0000
   b4c00:	00030220 	.word	0x00030220

000b4c04 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b03      	ldr	r3, [pc, #12]	; (b4c14 <system_ctrl_set_result+0x10>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c0e:	9301      	str	r3, [sp, #4]
   b4c10:	bd08      	pop	{r3, pc}
   b4c12:	0000      	.short	0x0000
   b4c14:	00030220 	.word	0x00030220

000b4c18 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <network_connect+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	685b      	ldr	r3, [r3, #4]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030240 	.word	0x00030240

000b4c28 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <network_connecting+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	689b      	ldr	r3, [r3, #8]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030240 	.word	0x00030240

000b4c38 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <network_disconnect+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	68db      	ldr	r3, [r3, #12]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030240 	.word	0x00030240

000b4c48 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <network_ready+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	691b      	ldr	r3, [r3, #16]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030240 	.word	0x00030240

000b4c58 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <network_on+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	695b      	ldr	r3, [r3, #20]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030240 	.word	0x00030240

000b4c68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <network_off+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	699b      	ldr	r3, [r3, #24]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030240 	.word	0x00030240

000b4c78 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <network_listen+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	69db      	ldr	r3, [r3, #28]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030240 	.word	0x00030240

000b4c88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <network_listening+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	6a1b      	ldr	r3, [r3, #32]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030240 	.word	0x00030240

000b4c98 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <network_set_listen_timeout+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030240 	.word	0x00030240

000b4ca8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <network_get_listen_timeout+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030240 	.word	0x00030240

000b4cb8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <network_is_on+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030240 	.word	0x00030240

000b4cc8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <network_is_off+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030240 	.word	0x00030240

000b4cd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030244 	.word	0x00030244

000b4ce8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <malloc+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	681b      	ldr	r3, [r3, #0]
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	0003021c 	.word	0x0003021c

000b4cf8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <free+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	685b      	ldr	r3, [r3, #4]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	0003021c 	.word	0x0003021c

000b4d08 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <__assert_func+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	0003021c 	.word	0x0003021c

000b4d18 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <newlib_impure_ptr_callback+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	0003021c 	.word	0x0003021c

000b4d28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d28:	2200      	movs	r2, #0
   b4d2a:	6840      	ldr	r0, [r0, #4]
   b4d2c:	4611      	mov	r1, r2
   b4d2e:	f7ff bfab 	b.w	b4c88 <network_listening>

000b4d32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d32:	2200      	movs	r2, #0
   b4d34:	6840      	ldr	r0, [r0, #4]
   b4d36:	4611      	mov	r1, r2
   b4d38:	f7ff bfb6 	b.w	b4ca8 <network_get_listen_timeout>

000b4d3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d3c:	6840      	ldr	r0, [r0, #4]
   b4d3e:	2200      	movs	r2, #0
   b4d40:	f7ff bfaa 	b.w	b4c98 <network_set_listen_timeout>

000b4d44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d44:	6840      	ldr	r0, [r0, #4]
   b4d46:	2200      	movs	r2, #0
   b4d48:	f081 0101 	eor.w	r1, r1, #1
   b4d4c:	f7ff bf94 	b.w	b4c78 <network_listen>

000b4d50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d50:	2300      	movs	r3, #0
   b4d52:	6840      	ldr	r0, [r0, #4]
   b4d54:	461a      	mov	r2, r3
   b4d56:	4619      	mov	r1, r3
   b4d58:	f7ff bf86 	b.w	b4c68 <network_off>

000b4d5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d5c:	2300      	movs	r3, #0
   b4d5e:	6840      	ldr	r0, [r0, #4]
   b4d60:	461a      	mov	r2, r3
   b4d62:	4619      	mov	r1, r3
   b4d64:	f7ff bf78 	b.w	b4c58 <network_on>

000b4d68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4d68:	2200      	movs	r2, #0
   b4d6a:	6840      	ldr	r0, [r0, #4]
   b4d6c:	4611      	mov	r1, r2
   b4d6e:	f7ff bf6b 	b.w	b4c48 <network_ready>

000b4d72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d72:	2200      	movs	r2, #0
   b4d74:	6840      	ldr	r0, [r0, #4]
   b4d76:	4611      	mov	r1, r2
   b4d78:	f7ff bf56 	b.w	b4c28 <network_connecting>

000b4d7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d7c:	6840      	ldr	r0, [r0, #4]
   b4d7e:	2200      	movs	r2, #0
   b4d80:	2102      	movs	r1, #2
   b4d82:	f7ff bf59 	b.w	b4c38 <network_disconnect>

000b4d86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d86:	2300      	movs	r3, #0
   b4d88:	6840      	ldr	r0, [r0, #4]
   b4d8a:	461a      	mov	r2, r3
   b4d8c:	f7ff bf44 	b.w	b4c18 <network_connect>

000b4d90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4d90:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4d92:	2203      	movs	r2, #3
   b4d94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4d96:	4a02      	ldr	r2, [pc, #8]	; (b4da0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4d98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4d9a:	4770      	bx	lr
   b4d9c:	2003e6b8 	.word	0x2003e6b8
   b4da0:	000b58ac 	.word	0x000b58ac

000b4da4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4da4:	b510      	push	{r4, lr}
   b4da6:	4604      	mov	r4, r0
   b4da8:	4608      	mov	r0, r1
{
    _spi = spi;
   b4daa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4dac:	f7ff fed0 	bl	b4b50 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4db0:	2300      	movs	r3, #0
   b4db2:	6063      	str	r3, [r4, #4]
}
   b4db4:	4620      	mov	r0, r4
   b4db6:	bd10      	pop	{r4, pc}

000b4db8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4db8:	4b05      	ldr	r3, [pc, #20]	; (b4dd0 <_GLOBAL__sub_I_System+0x18>)
   b4dba:	2202      	movs	r2, #2
   b4dbc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4dbe:	4b05      	ldr	r3, [pc, #20]	; (b4dd4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4dc0:	4a05      	ldr	r2, [pc, #20]	; (b4dd8 <_GLOBAL__sub_I_System+0x20>)
   b4dc2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4dc4:	2000      	movs	r0, #0
   b4dc6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4dca:	f7ff bf01 	b.w	b4bd0 <set_system_mode>
   b4dce:	bf00      	nop
   b4dd0:	2003e6cc 	.word	0x2003e6cc
   b4dd4:	2003e6c0 	.word	0x2003e6c0
   b4dd8:	ffff0000 	.word	0xffff0000

000b4ddc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4ddc:	4802      	ldr	r0, [pc, #8]	; (b4de8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4dde:	2300      	movs	r3, #0
   b4de0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4de2:	f7ff be2d 	b.w	b4a40 <os_mutex_recursive_create>
   b4de6:	bf00      	nop
   b4de8:	2003e6d0 	.word	0x2003e6d0

000b4dec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dee:	4606      	mov	r6, r0
   b4df0:	460d      	mov	r5, r1
  size_t n = 0;
   b4df2:	188f      	adds	r7, r1, r2
   b4df4:	2400      	movs	r4, #0
  while (size--) {
   b4df6:	42bd      	cmp	r5, r7
   b4df8:	d00c      	beq.n	b4e14 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4dfa:	6833      	ldr	r3, [r6, #0]
   b4dfc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4e00:	689b      	ldr	r3, [r3, #8]
   b4e02:	4630      	mov	r0, r6
   b4e04:	4798      	blx	r3
     if (chunk>=0)
   b4e06:	1e03      	subs	r3, r0, #0
   b4e08:	db01      	blt.n	b4e0e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4e0a:	441c      	add	r4, r3
  while (size--) {
   b4e0c:	e7f3      	b.n	b4df6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4e0e:	2c00      	cmp	r4, #0
   b4e10:	bf08      	it	eq
   b4e12:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4e14:	4620      	mov	r0, r4
   b4e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e18 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4e18:	b513      	push	{r0, r1, r4, lr}
   b4e1a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4e1c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4e1e:	b159      	cbz	r1, b4e38 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4e20:	9101      	str	r1, [sp, #4]
   b4e22:	f7ff fcf3 	bl	b480c <strlen>
   b4e26:	6823      	ldr	r3, [r4, #0]
   b4e28:	9901      	ldr	r1, [sp, #4]
   b4e2a:	68db      	ldr	r3, [r3, #12]
   b4e2c:	4602      	mov	r2, r0
   b4e2e:	4620      	mov	r0, r4
    }
   b4e30:	b002      	add	sp, #8
   b4e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4e36:	4718      	bx	r3
    }
   b4e38:	b002      	add	sp, #8
   b4e3a:	bd10      	pop	{r4, pc}

000b4e3c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4e3c:	6803      	ldr	r3, [r0, #0]
   b4e3e:	689b      	ldr	r3, [r3, #8]
   b4e40:	4718      	bx	r3

000b4e42 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4e42:	b530      	push	{r4, r5, lr}
   b4e44:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4e46:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4e48:	2a01      	cmp	r2, #1
  *str = '\0';
   b4e4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4e4e:	bf98      	it	ls
   b4e50:	220a      	movls	r2, #10
   b4e52:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e54:	460d      	mov	r5, r1
   b4e56:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4e5a:	fb01 5312 	mls	r3, r1, r2, r5
   b4e5e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e62:	2b09      	cmp	r3, #9
   b4e64:	bf94      	ite	ls
   b4e66:	3330      	addls	r3, #48	; 0x30
   b4e68:	3337      	addhi	r3, #55	; 0x37
   b4e6a:	b2db      	uxtb	r3, r3
  } while(n);
   b4e6c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e6e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4e72:	d9ef      	bls.n	b4e54 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4e74:	4621      	mov	r1, r4
   b4e76:	f7ff ffcf 	bl	b4e18 <_ZN5Print5writeEPKc>
}
   b4e7a:	b00b      	add	sp, #44	; 0x2c
   b4e7c:	bd30      	pop	{r4, r5, pc}
	...

000b4e80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4e80:	4b01      	ldr	r3, [pc, #4]	; (b4e88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4e82:	4a02      	ldr	r2, [pc, #8]	; (b4e8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4e84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4e86:	4770      	bx	lr
   b4e88:	2003e6d4 	.word	0x2003e6d4
   b4e8c:	000b58e0 	.word	0x000b58e0

000b4e90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4e90:	4b02      	ldr	r3, [pc, #8]	; (b4e9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4e92:	681a      	ldr	r2, [r3, #0]
   b4e94:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4e96:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4e98:	4770      	bx	lr
   b4e9a:	bf00      	nop
   b4e9c:	2003e634 	.word	0x2003e634
   b4ea0:	2003e6d8 	.word	0x2003e6d8

000b4ea4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4ea4:	4b01      	ldr	r3, [pc, #4]	; (b4eac <_GLOBAL__sub_I_RGB+0x8>)
   b4ea6:	2200      	movs	r2, #0
   b4ea8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4eaa:	4770      	bx	lr
   b4eac:	2003e6dc 	.word	0x2003e6dc

000b4eb0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4eb0:	4b01      	ldr	r3, [pc, #4]	; (b4eb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4eb2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4eb4:	4770      	bx	lr
   b4eb6:	bf00      	nop
   b4eb8:	2003e638 	.word	0x2003e638

000b4ebc <serialEventRun>:
{
   b4ebc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4ebe:	4b0b      	ldr	r3, [pc, #44]	; (b4eec <serialEventRun+0x30>)
   b4ec0:	b143      	cbz	r3, b4ed4 <serialEventRun+0x18>
   b4ec2:	f000 f963 	bl	b518c <_Z16_fetch_usbserialv>
   b4ec6:	6803      	ldr	r3, [r0, #0]
   b4ec8:	691b      	ldr	r3, [r3, #16]
   b4eca:	4798      	blx	r3
   b4ecc:	2800      	cmp	r0, #0
   b4ece:	dd01      	ble.n	b4ed4 <serialEventRun+0x18>
        serialEvent();
   b4ed0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4ed4:	4b06      	ldr	r3, [pc, #24]	; (b4ef0 <serialEventRun+0x34>)
   b4ed6:	b143      	cbz	r3, b4eea <serialEventRun+0x2e>
   b4ed8:	f000 fbc4 	bl	b5664 <_Z22__fetch_global_Serial1v>
   b4edc:	6803      	ldr	r3, [r0, #0]
   b4ede:	691b      	ldr	r3, [r3, #16]
   b4ee0:	4798      	blx	r3
   b4ee2:	2800      	cmp	r0, #0
   b4ee4:	dd01      	ble.n	b4eea <serialEventRun+0x2e>
        serialEvent1();
   b4ee6:	f3af 8000 	nop.w
}
   b4eea:	bd08      	pop	{r3, pc}
	...

000b4ef4 <_post_loop>:
{
   b4ef4:	b508      	push	{r3, lr}
	serialEventRun();
   b4ef6:	f7ff ffe1 	bl	b4ebc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4efa:	f7ff fd99 	bl	b4a30 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4efe:	4b01      	ldr	r3, [pc, #4]	; (b4f04 <_post_loop+0x10>)
   b4f00:	6018      	str	r0, [r3, #0]
}
   b4f02:	bd08      	pop	{r3, pc}
   b4f04:	2003e740 	.word	0x2003e740

000b4f08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f08:	4805      	ldr	r0, [pc, #20]	; (b4f20 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4f0a:	4a06      	ldr	r2, [pc, #24]	; (b4f24 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4f0c:	4906      	ldr	r1, [pc, #24]	; (b4f28 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4f0e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4f10:	1a12      	subs	r2, r2, r0
   b4f12:	f000 fc13 	bl	b573c <memcpy>
    __backup_sram_signature = signature;
   b4f16:	4b05      	ldr	r3, [pc, #20]	; (b4f2c <_Z33system_initialize_user_backup_ramv+0x24>)
   b4f18:	4a05      	ldr	r2, [pc, #20]	; (b4f30 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4f1a:	601a      	str	r2, [r3, #0]
}
   b4f1c:	bd08      	pop	{r3, pc}
   b4f1e:	bf00      	nop
   b4f20:	2003f400 	.word	0x2003f400
   b4f24:	2003f404 	.word	0x2003f404
   b4f28:	000b5b6c 	.word	0x000b5b6c
   b4f2c:	2003f400 	.word	0x2003f400
   b4f30:	9a271c1e 	.word	0x9a271c1e

000b4f34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4f34:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f36:	2300      	movs	r3, #0
   b4f38:	9300      	str	r3, [sp, #0]
   b4f3a:	461a      	mov	r2, r3
   b4f3c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f40:	f7ff fe60 	bl	b4c04 <system_ctrl_set_result>
}
   b4f44:	b003      	add	sp, #12
   b4f46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f4c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4f4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4f4e:	8843      	ldrh	r3, [r0, #2]
   b4f50:	2b0a      	cmp	r3, #10
   b4f52:	d008      	beq.n	b4f66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4f54:	2b50      	cmp	r3, #80	; 0x50
   b4f56:	d10b      	bne.n	b4f70 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4f58:	4b09      	ldr	r3, [pc, #36]	; (b4f80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4f5a:	681b      	ldr	r3, [r3, #0]
   b4f5c:	b14b      	cbz	r3, b4f72 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4f5e:	b003      	add	sp, #12
   b4f60:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4f64:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4f66:	f7ff ffe5 	bl	b4f34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4f6a:	b003      	add	sp, #12
   b4f6c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4f70:	2300      	movs	r3, #0
   b4f72:	9300      	str	r3, [sp, #0]
   b4f74:	461a      	mov	r2, r3
   b4f76:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4f7a:	f7ff fe43 	bl	b4c04 <system_ctrl_set_result>
}
   b4f7e:	e7f4      	b.n	b4f6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4f80:	2003e6f0 	.word	0x2003e6f0

000b4f84 <module_user_init_hook>:
{
   b4f84:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4f86:	4812      	ldr	r0, [pc, #72]	; (b4fd0 <module_user_init_hook+0x4c>)
   b4f88:	2100      	movs	r1, #0
   b4f8a:	f7ff fec5 	bl	b4d18 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4f8e:	4b11      	ldr	r3, [pc, #68]	; (b4fd4 <module_user_init_hook+0x50>)
   b4f90:	681a      	ldr	r2, [r3, #0]
   b4f92:	4b11      	ldr	r3, [pc, #68]	; (b4fd8 <module_user_init_hook+0x54>)
   b4f94:	429a      	cmp	r2, r3
   b4f96:	4b11      	ldr	r3, [pc, #68]	; (b4fdc <module_user_init_hook+0x58>)
   b4f98:	bf0c      	ite	eq
   b4f9a:	2201      	moveq	r2, #1
   b4f9c:	2200      	movne	r2, #0
   b4f9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4fa0:	d001      	beq.n	b4fa6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4fa2:	f7ff ffb1 	bl	b4f08 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4fa6:	f7ff fd3b 	bl	b4a20 <HAL_RNG_GetRandomNumber>
   b4faa:	4604      	mov	r4, r0
    srand(seed);
   b4fac:	f000 fbdc 	bl	b5768 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4fb0:	4b0b      	ldr	r3, [pc, #44]	; (b4fe0 <module_user_init_hook+0x5c>)
   b4fb2:	b113      	cbz	r3, b4fba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4fba:	2100      	movs	r1, #0
   b4fbc:	4808      	ldr	r0, [pc, #32]	; (b4fe0 <module_user_init_hook+0x5c>)
   b4fbe:	f7ff fe8b 	bl	b4cd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4fc6:	4807      	ldr	r0, [pc, #28]	; (b4fe4 <module_user_init_hook+0x60>)
   b4fc8:	2100      	movs	r1, #0
   b4fca:	f7ff be11 	b.w	b4bf0 <system_ctrl_set_app_request_handler>
   b4fce:	bf00      	nop
   b4fd0:	000b4eb1 	.word	0x000b4eb1
   b4fd4:	2003f400 	.word	0x2003f400
   b4fd8:	9a271c1e 	.word	0x9a271c1e
   b4fdc:	2003e6ec 	.word	0x2003e6ec
   b4fe0:	00000000 	.word	0x00000000
   b4fe4:	000b4f4d 	.word	0x000b4f4d

000b4fe8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4fe8:	4770      	bx	lr

000b4fea <_ZN9IPAddressD0Ev>:
   b4fea:	b510      	push	{r4, lr}
   b4fec:	2118      	movs	r1, #24
   b4fee:	4604      	mov	r4, r0
   b4ff0:	f7ff fc51 	bl	b4896 <_ZdlPvj>
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	bd10      	pop	{r4, pc}

000b4ff8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4ffa:	7d03      	ldrb	r3, [r0, #20]
   b4ffc:	2b06      	cmp	r3, #6
{
   b4ffe:	b08d      	sub	sp, #52	; 0x34
   b5000:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5002:	f100 0704 	add.w	r7, r0, #4
   b5006:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b500a:	d012      	beq.n	b5032 <_ZNK9IPAddress7printToER5Print+0x3a>
   b500c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5010:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5014:	220a      	movs	r2, #10
   b5016:	4630      	mov	r0, r6
   b5018:	f7ff ff13 	bl	b4e42 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b501c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b501e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5020:	d019      	beq.n	b5056 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5022:	2c00      	cmp	r4, #0
   b5024:	d0f4      	beq.n	b5010 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5026:	212e      	movs	r1, #46	; 0x2e
   b5028:	4630      	mov	r0, r6
   b502a:	f7ff ff07 	bl	b4e3c <_ZN5Print5printEc>
   b502e:	4404      	add	r4, r0
   b5030:	e7ee      	b.n	b5010 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5032:	232f      	movs	r3, #47	; 0x2f
   b5034:	466a      	mov	r2, sp
   b5036:	4639      	mov	r1, r7
   b5038:	200a      	movs	r0, #10
		buf[0] = 0;
   b503a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b503e:	f7ff fd07 	bl	b4a50 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5042:	4668      	mov	r0, sp
   b5044:	f7ff fbe2 	bl	b480c <strlen>
   b5048:	6833      	ldr	r3, [r6, #0]
   b504a:	4602      	mov	r2, r0
   b504c:	68db      	ldr	r3, [r3, #12]
   b504e:	4669      	mov	r1, sp
   b5050:	4630      	mov	r0, r6
   b5052:	4798      	blx	r3
   b5054:	4604      	mov	r4, r0
    }
    return n;
}
   b5056:	4620      	mov	r0, r4
   b5058:	b00d      	add	sp, #52	; 0x34
   b505a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b505c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b505c:	b510      	push	{r4, lr}
   b505e:	4b05      	ldr	r3, [pc, #20]	; (b5074 <_ZN9IPAddressC1Ev+0x18>)
   b5060:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5062:	2211      	movs	r2, #17
   b5064:	f840 3b04 	str.w	r3, [r0], #4
   b5068:	2100      	movs	r1, #0
   b506a:	f000 fb75 	bl	b5758 <memset>
}
   b506e:	4620      	mov	r0, r4
   b5070:	bd10      	pop	{r4, pc}
   b5072:	bf00      	nop
   b5074:	000b5908 	.word	0x000b5908

000b5078 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5078:	4603      	mov	r3, r0
   b507a:	4a07      	ldr	r2, [pc, #28]	; (b5098 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b507c:	b510      	push	{r4, lr}
   b507e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5082:	f101 0210 	add.w	r2, r1, #16
   b5086:	f851 4b04 	ldr.w	r4, [r1], #4
   b508a:	f843 4b04 	str.w	r4, [r3], #4
   b508e:	4291      	cmp	r1, r2
   b5090:	d1f9      	bne.n	b5086 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5092:	780a      	ldrb	r2, [r1, #0]
   b5094:	701a      	strb	r2, [r3, #0]
}
   b5096:	bd10      	pop	{r4, pc}
   b5098:	000b5908 	.word	0x000b5908

000b509c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b509c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b509e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b50a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b50a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b50aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b50ae:	2304      	movs	r3, #4
   b50b0:	6041      	str	r1, [r0, #4]
   b50b2:	7503      	strb	r3, [r0, #20]
}
   b50b4:	bd10      	pop	{r4, pc}
	...

000b50b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b50b8:	b507      	push	{r0, r1, r2, lr}
   b50ba:	4b06      	ldr	r3, [pc, #24]	; (b50d4 <_ZN9IPAddressC1EPKh+0x1c>)
   b50bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b50be:	78cb      	ldrb	r3, [r1, #3]
   b50c0:	9300      	str	r3, [sp, #0]
   b50c2:	788b      	ldrb	r3, [r1, #2]
   b50c4:	784a      	ldrb	r2, [r1, #1]
   b50c6:	7809      	ldrb	r1, [r1, #0]
   b50c8:	f7ff ffe8 	bl	b509c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b50cc:	b003      	add	sp, #12
   b50ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b50d2:	bf00      	nop
   b50d4:	000b5908 	.word	0x000b5908

000b50d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b50d8:	7441      	strb	r1, [r0, #17]
}
   b50da:	4770      	bx	lr

000b50dc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b50dc:	4770      	bx	lr

000b50de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b50de:	4770      	bx	lr

000b50e0 <_ZN9USBSerial4readEv>:
{
   b50e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b50e2:	2100      	movs	r1, #0
   b50e4:	7c00      	ldrb	r0, [r0, #16]
   b50e6:	f7ff fd5b 	bl	b4ba0 <HAL_USB_USART_Receive_Data>
}
   b50ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50ee:	bd08      	pop	{r3, pc}

000b50f0 <_ZN9USBSerial4peekEv>:
{
   b50f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b50f2:	2101      	movs	r1, #1
   b50f4:	7c00      	ldrb	r0, [r0, #16]
   b50f6:	f7ff fd53 	bl	b4ba0 <HAL_USB_USART_Receive_Data>
}
   b50fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50fe:	bd08      	pop	{r3, pc}

000b5100 <_ZN9USBSerial17availableForWriteEv>:
{
   b5100:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5102:	7c00      	ldrb	r0, [r0, #16]
   b5104:	f7ff fd44 	bl	b4b90 <HAL_USB_USART_Available_Data_For_Write>
}
   b5108:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b510c:	bd08      	pop	{r3, pc}

000b510e <_ZN9USBSerial9availableEv>:
{
   b510e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5110:	7c00      	ldrb	r0, [r0, #16]
   b5112:	f7ff fd35 	bl	b4b80 <HAL_USB_USART_Available_Data>
}
   b5116:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b511a:	bd08      	pop	{r3, pc}

000b511c <_ZN9USBSerial5writeEh>:
{
   b511c:	b513      	push	{r0, r1, r4, lr}
   b511e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5120:	7c00      	ldrb	r0, [r0, #16]
{
   b5122:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5124:	f7ff fd34 	bl	b4b90 <HAL_USB_USART_Available_Data_For_Write>
   b5128:	2800      	cmp	r0, #0
   b512a:	9901      	ldr	r1, [sp, #4]
   b512c:	dc01      	bgt.n	b5132 <_ZN9USBSerial5writeEh+0x16>
   b512e:	7c60      	ldrb	r0, [r4, #17]
   b5130:	b120      	cbz	r0, b513c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5132:	7c20      	ldrb	r0, [r4, #16]
   b5134:	f7ff fd3c 	bl	b4bb0 <HAL_USB_USART_Send_Data>
   b5138:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b513c:	b002      	add	sp, #8
   b513e:	bd10      	pop	{r4, pc}

000b5140 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5140:	7c00      	ldrb	r0, [r0, #16]
   b5142:	f7ff bd3d 	b.w	b4bc0 <HAL_USB_USART_Flush_Data>

000b5146 <_ZN9USBSerialD0Ev>:
   b5146:	b510      	push	{r4, lr}
   b5148:	2114      	movs	r1, #20
   b514a:	4604      	mov	r4, r0
   b514c:	f7ff fba3 	bl	b4896 <_ZdlPvj>
   b5150:	4620      	mov	r0, r4
   b5152:	bd10      	pop	{r4, pc}

000b5154 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5154:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b515a:	4604      	mov	r4, r0
   b515c:	4608      	mov	r0, r1
   b515e:	2100      	movs	r1, #0
   b5160:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5164:	4b04      	ldr	r3, [pc, #16]	; (b5178 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5166:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5168:	2301      	movs	r3, #1
  _serial = serial;
   b516a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b516c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b516e:	4611      	mov	r1, r2
   b5170:	f7ff fcfe 	bl	b4b70 <HAL_USB_USART_Init>
}
   b5174:	4620      	mov	r0, r4
   b5176:	bd10      	pop	{r4, pc}
   b5178:	000b591c 	.word	0x000b591c

000b517c <_Z19acquireSerialBufferv>:
{
   b517c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b517e:	2214      	movs	r2, #20
{
   b5180:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5182:	2100      	movs	r1, #0
   b5184:	f000 fae8 	bl	b5758 <memset>
}
   b5188:	4620      	mov	r0, r4
   b518a:	bd10      	pop	{r4, pc}

000b518c <_Z16_fetch_usbserialv>:
{
   b518c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b518e:	4c0f      	ldr	r4, [pc, #60]	; (b51cc <_Z16_fetch_usbserialv+0x40>)
{
   b5190:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5192:	a803      	add	r0, sp, #12
   b5194:	f7ff fff2 	bl	b517c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5198:	7821      	ldrb	r1, [r4, #0]
   b519a:	f3bf 8f5b 	dmb	ish
   b519e:	f011 0101 	ands.w	r1, r1, #1
   b51a2:	d10f      	bne.n	b51c4 <_Z16_fetch_usbserialv+0x38>
   b51a4:	4620      	mov	r0, r4
   b51a6:	9101      	str	r1, [sp, #4]
   b51a8:	f7ff fb77 	bl	b489a <__cxa_guard_acquire>
   b51ac:	9901      	ldr	r1, [sp, #4]
   b51ae:	b148      	cbz	r0, b51c4 <_Z16_fetch_usbserialv+0x38>
   b51b0:	aa03      	add	r2, sp, #12
   b51b2:	4807      	ldr	r0, [pc, #28]	; (b51d0 <_Z16_fetch_usbserialv+0x44>)
   b51b4:	f7ff ffce 	bl	b5154 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b51b8:	4620      	mov	r0, r4
   b51ba:	f7ff fb73 	bl	b48a4 <__cxa_guard_release>
   b51be:	4805      	ldr	r0, [pc, #20]	; (b51d4 <_Z16_fetch_usbserialv+0x48>)
   b51c0:	f000 fab6 	bl	b5730 <atexit>
	return _usbserial;
}
   b51c4:	4802      	ldr	r0, [pc, #8]	; (b51d0 <_Z16_fetch_usbserialv+0x44>)
   b51c6:	b008      	add	sp, #32
   b51c8:	bd10      	pop	{r4, pc}
   b51ca:	bf00      	nop
   b51cc:	2003e6f4 	.word	0x2003e6f4
   b51d0:	2003e6f8 	.word	0x2003e6f8
   b51d4:	000b50dd 	.word	0x000b50dd

000b51d8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b51d8:	4770      	bx	lr

000b51da <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b51da:	7441      	strb	r1, [r0, #17]
}
   b51dc:	4770      	bx	lr

000b51de <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b51de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b51e0:	7c00      	ldrb	r0, [r0, #16]
   b51e2:	f7ff fc6d 	bl	b4ac0 <hal_usart_available_data_for_write>
}
   b51e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b51ea:	bd08      	pop	{r3, pc}

000b51ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b51ec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b51ee:	7c00      	ldrb	r0, [r0, #16]
   b51f0:	f7ff fc3e 	bl	b4a70 <hal_usart_available>
}
   b51f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b51f8:	bd08      	pop	{r3, pc}

000b51fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b51fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b51fc:	7c00      	ldrb	r0, [r0, #16]
   b51fe:	f7ff fc47 	bl	b4a90 <hal_usart_peek>
}
   b5202:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5206:	bd08      	pop	{r3, pc}

000b5208 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5208:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b520a:	7c00      	ldrb	r0, [r0, #16]
   b520c:	f7ff fc38 	bl	b4a80 <hal_usart_read>
}
   b5210:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5214:	bd08      	pop	{r3, pc}

000b5216 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5216:	7c00      	ldrb	r0, [r0, #16]
   b5218:	f7ff bc42 	b.w	b4aa0 <hal_usart_flush>

000b521c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b521c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b521e:	7c45      	ldrb	r5, [r0, #17]
{
   b5220:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5222:	b12d      	cbz	r5, b5230 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5224:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5226:	b003      	add	sp, #12
   b5228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b522c:	f7ff bc18 	b.w	b4a60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5230:	7c00      	ldrb	r0, [r0, #16]
   b5232:	9101      	str	r1, [sp, #4]
   b5234:	f7ff fc44 	bl	b4ac0 <hal_usart_available_data_for_write>
   b5238:	2800      	cmp	r0, #0
   b523a:	9901      	ldr	r1, [sp, #4]
   b523c:	dcf2      	bgt.n	b5224 <_ZN11USARTSerial5writeEh+0x8>
}
   b523e:	4628      	mov	r0, r5
   b5240:	b003      	add	sp, #12
   b5242:	bd30      	pop	{r4, r5, pc}

000b5244 <_ZN11USARTSerialD0Ev>:
   b5244:	b510      	push	{r4, lr}
   b5246:	2114      	movs	r1, #20
   b5248:	4604      	mov	r4, r0
   b524a:	f7ff fb24 	bl	b4896 <_ZdlPvj>
   b524e:	4620      	mov	r0, r4
   b5250:	bd10      	pop	{r4, pc}
	...

000b5254 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5254:	b510      	push	{r4, lr}
   b5256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b525a:	4604      	mov	r4, r0
   b525c:	4608      	mov	r0, r1
   b525e:	4611      	mov	r1, r2
   b5260:	2200      	movs	r2, #0
   b5262:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5266:	4b04      	ldr	r3, [pc, #16]	; (b5278 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5268:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b526a:	2301      	movs	r3, #1
  _serial = serial;
   b526c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b526e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5270:	f7ff fc2e 	bl	b4ad0 <hal_usart_init_ex>
}
   b5274:	4620      	mov	r0, r4
   b5276:	bd10      	pop	{r4, pc}
   b5278:	000b594c 	.word	0x000b594c

000b527c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b527c:	4770      	bx	lr

000b527e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b527e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5280:	4606      	mov	r6, r0
   b5282:	4615      	mov	r5, r2
   b5284:	460c      	mov	r4, r1
   b5286:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5288:	42bc      	cmp	r4, r7
   b528a:	d006      	beq.n	b529a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b528c:	6833      	ldr	r3, [r6, #0]
   b528e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	4630      	mov	r0, r6
   b5296:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5298:	e7f6      	b.n	b5288 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b529a:	4628      	mov	r0, r5
   b529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b529e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b529e:	7c00      	ldrb	r0, [r0, #16]
   b52a0:	2200      	movs	r2, #0
   b52a2:	f7ff bc1d 	b.w	b4ae0 <hal_i2c_write>

000b52a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b52a6:	7c00      	ldrb	r0, [r0, #16]
   b52a8:	2100      	movs	r1, #0
   b52aa:	f7ff bc21 	b.w	b4af0 <hal_i2c_available>

000b52ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b52ae:	7c00      	ldrb	r0, [r0, #16]
   b52b0:	2100      	movs	r1, #0
   b52b2:	f7ff bc25 	b.w	b4b00 <hal_i2c_read>

000b52b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b52b6:	7c00      	ldrb	r0, [r0, #16]
   b52b8:	2100      	movs	r1, #0
   b52ba:	f7ff bc29 	b.w	b4b10 <hal_i2c_peek>

000b52be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b52be:	7c00      	ldrb	r0, [r0, #16]
   b52c0:	2100      	movs	r1, #0
   b52c2:	f7ff bc2d 	b.w	b4b20 <hal_i2c_flush>

000b52c6 <_ZN7TwoWireD0Ev>:
   b52c6:	b510      	push	{r4, lr}
   b52c8:	2114      	movs	r1, #20
   b52ca:	4604      	mov	r4, r0
   b52cc:	f7ff fae3 	bl	b4896 <_ZdlPvj>
   b52d0:	4620      	mov	r0, r4
   b52d2:	bd10      	pop	{r4, pc}

000b52d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b52d4:	b538      	push	{r3, r4, r5, lr}
   b52d6:	4604      	mov	r4, r0
   b52d8:	4615      	mov	r5, r2
   b52da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b52de:	2200      	movs	r2, #0
   b52e0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b52e4:	4b09      	ldr	r3, [pc, #36]	; (b530c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b52e6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b52e8:	4608      	mov	r0, r1
   b52ea:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b52ec:	4629      	mov	r1, r5
   b52ee:	f7ff fc27 	bl	b4b40 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b52f2:	30bf      	adds	r0, #191	; 0xbf
   b52f4:	d108      	bne.n	b5308 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b52f6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b52f8:	07db      	lsls	r3, r3, #31
   b52fa:	d505      	bpl.n	b5308 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b52fc:	6868      	ldr	r0, [r5, #4]
   b52fe:	f7ff fcfb 	bl	b4cf8 <free>
    free(conf.tx_buffer);
   b5302:	68e8      	ldr	r0, [r5, #12]
   b5304:	f7ff fcf8 	bl	b4cf8 <free>
}
   b5308:	4620      	mov	r0, r4
   b530a:	bd38      	pop	{r3, r4, r5, pc}
   b530c:	000b597c 	.word	0x000b597c

000b5310 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5310:	2200      	movs	r2, #0
   b5312:	6840      	ldr	r0, [r0, #4]
   b5314:	4611      	mov	r1, r2
   b5316:	f7ff bc97 	b.w	b4c48 <network_ready>

000b531a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b531a:	2200      	movs	r2, #0
   b531c:	6840      	ldr	r0, [r0, #4]
   b531e:	4611      	mov	r1, r2
   b5320:	f7ff bcb2 	b.w	b4c88 <network_listening>

000b5324 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5324:	2200      	movs	r2, #0
   b5326:	6840      	ldr	r0, [r0, #4]
   b5328:	4611      	mov	r1, r2
   b532a:	f7ff bcbd 	b.w	b4ca8 <network_get_listen_timeout>

000b532e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b532e:	6840      	ldr	r0, [r0, #4]
   b5330:	2200      	movs	r2, #0
   b5332:	f7ff bcb1 	b.w	b4c98 <network_set_listen_timeout>

000b5336 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5336:	6840      	ldr	r0, [r0, #4]
   b5338:	2200      	movs	r2, #0
   b533a:	f081 0101 	eor.w	r1, r1, #1
   b533e:	f7ff bc9b 	b.w	b4c78 <network_listen>

000b5342 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5342:	2300      	movs	r3, #0
   b5344:	6840      	ldr	r0, [r0, #4]
   b5346:	461a      	mov	r2, r3
   b5348:	4619      	mov	r1, r3
   b534a:	f7ff bc8d 	b.w	b4c68 <network_off>

000b534e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b534e:	2300      	movs	r3, #0
   b5350:	6840      	ldr	r0, [r0, #4]
   b5352:	461a      	mov	r2, r3
   b5354:	4619      	mov	r1, r3
   b5356:	f7ff bc7f 	b.w	b4c58 <network_on>

000b535a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b535a:	2200      	movs	r2, #0
   b535c:	6840      	ldr	r0, [r0, #4]
   b535e:	4611      	mov	r1, r2
   b5360:	f7ff bc62 	b.w	b4c28 <network_connecting>

000b5364 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5364:	6840      	ldr	r0, [r0, #4]
   b5366:	2200      	movs	r2, #0
   b5368:	2102      	movs	r1, #2
   b536a:	f7ff bc65 	b.w	b4c38 <network_disconnect>

000b536e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b536e:	2300      	movs	r3, #0
   b5370:	6840      	ldr	r0, [r0, #4]
   b5372:	461a      	mov	r2, r3
   b5374:	f7ff bc50 	b.w	b4c18 <network_connect>

000b5378 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5378:	4b02      	ldr	r3, [pc, #8]	; (b5384 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b537a:	2204      	movs	r2, #4
   b537c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b537e:	4a02      	ldr	r2, [pc, #8]	; (b5388 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5380:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5382:	4770      	bx	lr
   b5384:	2003e70c 	.word	0x2003e70c
   b5388:	000b59a4 	.word	0x000b59a4

000b538c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b538c:	2300      	movs	r3, #0
   b538e:	6840      	ldr	r0, [r0, #4]
   b5390:	461a      	mov	r2, r3
   b5392:	f7ff bc41 	b.w	b4c18 <network_connect>

000b5396 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5396:	6840      	ldr	r0, [r0, #4]
   b5398:	2200      	movs	r2, #0
   b539a:	2102      	movs	r1, #2
   b539c:	f7ff bc4c 	b.w	b4c38 <network_disconnect>

000b53a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b53a0:	2200      	movs	r2, #0
   b53a2:	6840      	ldr	r0, [r0, #4]
   b53a4:	4611      	mov	r1, r2
   b53a6:	f7ff bc3f 	b.w	b4c28 <network_connecting>

000b53aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b53aa:	2200      	movs	r2, #0
   b53ac:	6840      	ldr	r0, [r0, #4]
   b53ae:	4611      	mov	r1, r2
   b53b0:	f7ff bc4a 	b.w	b4c48 <network_ready>

000b53b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b53b4:	2300      	movs	r3, #0
   b53b6:	6840      	ldr	r0, [r0, #4]
   b53b8:	461a      	mov	r2, r3
   b53ba:	4619      	mov	r1, r3
   b53bc:	f7ff bc4c 	b.w	b4c58 <network_on>

000b53c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b53c0:	2300      	movs	r3, #0
   b53c2:	6840      	ldr	r0, [r0, #4]
   b53c4:	461a      	mov	r2, r3
   b53c6:	4619      	mov	r1, r3
   b53c8:	f7ff bc4e 	b.w	b4c68 <network_off>

000b53cc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b53cc:	6840      	ldr	r0, [r0, #4]
   b53ce:	2100      	movs	r1, #0
   b53d0:	f7ff bc72 	b.w	b4cb8 <network_is_on>

000b53d4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b53d4:	6840      	ldr	r0, [r0, #4]
   b53d6:	2100      	movs	r1, #0
   b53d8:	f7ff bc76 	b.w	b4cc8 <network_is_off>

000b53dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b53dc:	6840      	ldr	r0, [r0, #4]
   b53de:	2200      	movs	r2, #0
   b53e0:	f081 0101 	eor.w	r1, r1, #1
   b53e4:	f7ff bc48 	b.w	b4c78 <network_listen>

000b53e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b53e8:	6840      	ldr	r0, [r0, #4]
   b53ea:	2200      	movs	r2, #0
   b53ec:	f7ff bc54 	b.w	b4c98 <network_set_listen_timeout>

000b53f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b53f0:	2200      	movs	r2, #0
   b53f2:	6840      	ldr	r0, [r0, #4]
   b53f4:	4611      	mov	r1, r2
   b53f6:	f7ff bc57 	b.w	b4ca8 <network_get_listen_timeout>

000b53fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b53fa:	2200      	movs	r2, #0
   b53fc:	6840      	ldr	r0, [r0, #4]
   b53fe:	4611      	mov	r1, r2
   b5400:	f7ff bc42 	b.w	b4c88 <network_listening>

000b5404 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5408:	b095      	sub	sp, #84	; 0x54
   b540a:	4614      	mov	r4, r2
   b540c:	460d      	mov	r5, r1
   b540e:	4607      	mov	r7, r0
    IPAddress addr;
   b5410:	f7ff fe24 	bl	b505c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5414:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5416:	221c      	movs	r2, #28
   b5418:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b541a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b541c:	f000 f99c 	bl	b5758 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5420:	2340      	movs	r3, #64	; 0x40
   b5422:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5424:	4620      	mov	r0, r4
   b5426:	466b      	mov	r3, sp
   b5428:	aa0c      	add	r2, sp, #48	; 0x30
   b542a:	2100      	movs	r1, #0
   b542c:	f7ff fab8 	bl	b49a0 <netdb_getaddrinfo>
    if (!r) {
   b5430:	4604      	mov	r4, r0
   b5432:	2800      	cmp	r0, #0
   b5434:	d14b      	bne.n	b54ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5436:	4602      	mov	r2, r0
   b5438:	2101      	movs	r1, #1
   b543a:	6868      	ldr	r0, [r5, #4]
   b543c:	f7ff fc04 	bl	b4c48 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5440:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5442:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5444:	4622      	mov	r2, r4
   b5446:	6868      	ldr	r0, [r5, #4]
   b5448:	f7ff fbfe 	bl	b4c48 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b544c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b544e:	4681      	mov	r9, r0
        bool ok = false;
   b5450:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5452:	2e00      	cmp	r6, #0
   b5454:	d03b      	beq.n	b54ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5456:	2900      	cmp	r1, #0
   b5458:	d139      	bne.n	b54ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b545a:	6873      	ldr	r3, [r6, #4]
   b545c:	2b02      	cmp	r3, #2
   b545e:	d003      	beq.n	b5468 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5460:	2b0a      	cmp	r3, #10
   b5462:	d011      	beq.n	b5488 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5464:	69f6      	ldr	r6, [r6, #28]
   b5466:	e7f4      	b.n	b5452 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5468:	f1b8 0f00 	cmp.w	r8, #0
   b546c:	d0fa      	beq.n	b5464 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b546e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5470:	a806      	add	r0, sp, #24
   b5472:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5474:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5476:	f7ff fe1f 	bl	b50b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b547a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b547c:	1d3c      	adds	r4, r7, #4
   b547e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5480:	682b      	ldr	r3, [r5, #0]
   b5482:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5484:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5486:	e7ed      	b.n	b5464 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5488:	f1b9 0f00 	cmp.w	r9, #0
   b548c:	d0ea      	beq.n	b5464 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b548e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5490:	2210      	movs	r2, #16
   b5492:	a801      	add	r0, sp, #4
   b5494:	f000 f960 	bl	b5758 <memset>
                    a.v = 6;
   b5498:	2306      	movs	r3, #6
   b549a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b549e:	ad01      	add	r5, sp, #4
   b54a0:	f104 0308 	add.w	r3, r4, #8
   b54a4:	3418      	adds	r4, #24
   b54a6:	6818      	ldr	r0, [r3, #0]
   b54a8:	6859      	ldr	r1, [r3, #4]
   b54aa:	462a      	mov	r2, r5
   b54ac:	c203      	stmia	r2!, {r0, r1}
   b54ae:	3308      	adds	r3, #8
   b54b0:	42a3      	cmp	r3, r4
   b54b2:	4615      	mov	r5, r2
   b54b4:	d1f7      	bne.n	b54a6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b54b6:	a901      	add	r1, sp, #4
   b54b8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b54ba:	ad07      	add	r5, sp, #28
   b54bc:	f7ff fddc 	bl	b5078 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b54c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b54c2:	1d3c      	adds	r4, r7, #4
   b54c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b54c6:	682b      	ldr	r3, [r5, #0]
   b54c8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b54ca:	4649      	mov	r1, r9
   b54cc:	e7ca      	b.n	b5464 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b54ce:	9800      	ldr	r0, [sp, #0]
   b54d0:	f7ff fa5e 	bl	b4990 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b54d4:	4638      	mov	r0, r7
   b54d6:	b015      	add	sp, #84	; 0x54
   b54d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b54dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b54dc:	4b02      	ldr	r3, [pc, #8]	; (b54e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b54de:	4a03      	ldr	r2, [pc, #12]	; (b54ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b54e0:	601a      	str	r2, [r3, #0]
   b54e2:	2200      	movs	r2, #0
   b54e4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b54e6:	4770      	bx	lr
   b54e8:	2003e714 	.word	0x2003e714
   b54ec:	000b59e0 	.word	0x000b59e0

000b54f0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b54f0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b54f2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b54f4:	d902      	bls.n	b54fc <pinAvailable+0xc>
    return false;
   b54f6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b54f8:	b002      	add	sp, #8
   b54fa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b54fc:	f1a0 030b 	sub.w	r3, r0, #11
   b5500:	2b02      	cmp	r3, #2
   b5502:	d81a      	bhi.n	b553a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5504:	4c17      	ldr	r4, [pc, #92]	; (b5564 <pinAvailable+0x74>)
   b5506:	7821      	ldrb	r1, [r4, #0]
   b5508:	f3bf 8f5b 	dmb	ish
   b550c:	f011 0101 	ands.w	r1, r1, #1
   b5510:	d10b      	bne.n	b552a <pinAvailable+0x3a>
   b5512:	4620      	mov	r0, r4
   b5514:	9101      	str	r1, [sp, #4]
   b5516:	f7ff f9c0 	bl	b489a <__cxa_guard_acquire>
   b551a:	9901      	ldr	r1, [sp, #4]
   b551c:	b128      	cbz	r0, b552a <pinAvailable+0x3a>
   b551e:	4812      	ldr	r0, [pc, #72]	; (b5568 <pinAvailable+0x78>)
   b5520:	f7ff fc40 	bl	b4da4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5524:	4620      	mov	r0, r4
   b5526:	f7ff f9bd 	bl	b48a4 <__cxa_guard_release>
   b552a:	4b0f      	ldr	r3, [pc, #60]	; (b5568 <pinAvailable+0x78>)
   b552c:	7818      	ldrb	r0, [r3, #0]
   b552e:	f7ff fb17 	bl	b4b60 <hal_spi_is_enabled>
   b5532:	2800      	cmp	r0, #0
   b5534:	d1df      	bne.n	b54f6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5536:	2001      	movs	r0, #1
   b5538:	e7de      	b.n	b54f8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b553a:	2801      	cmp	r0, #1
   b553c:	d809      	bhi.n	b5552 <pinAvailable+0x62>
   b553e:	f000 f8d1 	bl	b56e4 <_Z19__fetch_global_Wirev>
   b5542:	2100      	movs	r1, #0
   b5544:	7c00      	ldrb	r0, [r0, #16]
   b5546:	f7ff faf3 	bl	b4b30 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b554a:	f080 0001 	eor.w	r0, r0, #1
   b554e:	b2c0      	uxtb	r0, r0
   b5550:	e7d2      	b.n	b54f8 <pinAvailable+0x8>
   b5552:	3809      	subs	r0, #9
   b5554:	2801      	cmp	r0, #1
   b5556:	d8ee      	bhi.n	b5536 <pinAvailable+0x46>
   b5558:	f000 f884 	bl	b5664 <_Z22__fetch_global_Serial1v>
   b555c:	7c00      	ldrb	r0, [r0, #16]
   b555e:	f7ff faa7 	bl	b4ab0 <hal_usart_is_enabled>
   b5562:	e7f2      	b.n	b554a <pinAvailable+0x5a>
   b5564:	2003e71c 	.word	0x2003e71c
   b5568:	2003e720 	.word	0x2003e720

000b556c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b556c:	2823      	cmp	r0, #35	; 0x23
{
   b556e:	b538      	push	{r3, r4, r5, lr}
   b5570:	4604      	mov	r4, r0
   b5572:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5574:	d80a      	bhi.n	b558c <pinMode+0x20>
   b5576:	29ff      	cmp	r1, #255	; 0xff
   b5578:	d008      	beq.n	b558c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b557a:	f7ff ffb9 	bl	b54f0 <pinAvailable>
   b557e:	b128      	cbz	r0, b558c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5580:	4629      	mov	r1, r5
   b5582:	4620      	mov	r0, r4
}
   b5584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5588:	f7ff ba1a 	b.w	b49c0 <hal_gpio_mode>
}
   b558c:	bd38      	pop	{r3, r4, r5, pc}

000b558e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b558e:	b510      	push	{r4, lr}
   b5590:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5592:	f7ff fa1d 	bl	b49d0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5596:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5598:	b2db      	uxtb	r3, r3
   b559a:	2b01      	cmp	r3, #1
   b559c:	d908      	bls.n	b55b0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b559e:	4620      	mov	r0, r4
   b55a0:	f7ff ffa6 	bl	b54f0 <pinAvailable>
   b55a4:	b120      	cbz	r0, b55b0 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b55a6:	4620      	mov	r0, r4
}
   b55a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b55ac:	f7ff ba18 	b.w	b49e0 <hal_gpio_read>
}
   b55b0:	2000      	movs	r0, #0
   b55b2:	bd10      	pop	{r4, pc}

000b55b4 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b55b4:	280d      	cmp	r0, #13
{
   b55b6:	b510      	push	{r4, lr}
   b55b8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b55ba:	bf9c      	itt	ls
   b55bc:	340e      	addls	r4, #14
   b55be:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b55c0:	4620      	mov	r0, r4
   b55c2:	f7ff ff95 	bl	b54f0 <pinAvailable>
   b55c6:	b150      	cbz	r0, b55de <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b55c8:	2103      	movs	r1, #3
   b55ca:	4620      	mov	r0, r4
   b55cc:	f7ff f9f0 	bl	b49b0 <hal_pin_validate_function>
   b55d0:	2803      	cmp	r0, #3
   b55d2:	d104      	bne.n	b55de <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b55d4:	4620      	mov	r0, r4
}
   b55d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b55da:	f7ff ba11 	b.w	b4a00 <hal_adc_read>
}
   b55de:	2000      	movs	r0, #0
   b55e0:	bd10      	pop	{r4, pc}

000b55e2 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b55e2:	b538      	push	{r3, r4, r5, lr}
   b55e4:	4604      	mov	r4, r0
   b55e6:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b55e8:	f7ff ff82 	bl	b54f0 <pinAvailable>
   b55ec:	b1f0      	cbz	r0, b562c <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b55ee:	2104      	movs	r1, #4
   b55f0:	4620      	mov	r0, r4
   b55f2:	f7ff f9dd 	bl	b49b0 <hal_pin_validate_function>
   b55f6:	2804      	cmp	r0, #4
   b55f8:	d105      	bne.n	b5606 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b55fa:	b2a9      	uxth	r1, r5
   b55fc:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b55fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b5602:	f7ff b9f5 	b.w	b49f0 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b5606:	2102      	movs	r1, #2
   b5608:	4620      	mov	r0, r4
   b560a:	f7ff f9d1 	bl	b49b0 <hal_pin_validate_function>
   b560e:	2802      	cmp	r0, #2
   b5610:	d10c      	bne.n	b562c <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b5612:	4620      	mov	r0, r4
   b5614:	f7ff f9dc 	bl	b49d0 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b5618:	2801      	cmp	r0, #1
   b561a:	d001      	beq.n	b5620 <_Z11analogWritetm+0x3e>
   b561c:	2804      	cmp	r0, #4
   b561e:	d105      	bne.n	b562c <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b5620:	4629      	mov	r1, r5
   b5622:	4620      	mov	r0, r4
}
   b5624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b5628:	f7ff b9f2 	b.w	b4a10 <hal_pwm_write_ext>
}
   b562c:	bd38      	pop	{r3, r4, r5, pc}

000b562e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b562e:	4770      	bx	lr

000b5630 <_Z20acquireSerial1Bufferv>:
{
   b5630:	b538      	push	{r3, r4, r5, lr}
   b5632:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5634:	2514      	movs	r5, #20
   b5636:	462a      	mov	r2, r5
   b5638:	2100      	movs	r1, #0
   b563a:	f000 f88d 	bl	b5758 <memset>
   b563e:	8025      	strh	r5, [r4, #0]
   b5640:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5642:	4907      	ldr	r1, [pc, #28]	; (b5660 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5644:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5646:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5648:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b564a:	f000 f86f 	bl	b572c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b564e:	4904      	ldr	r1, [pc, #16]	; (b5660 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5650:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5652:	4628      	mov	r0, r5
   b5654:	f000 f86a 	bl	b572c <_ZnajRKSt9nothrow_t>
    };
   b5658:	60e0      	str	r0, [r4, #12]
}
   b565a:	4620      	mov	r0, r4
   b565c:	bd38      	pop	{r3, r4, r5, pc}
   b565e:	bf00      	nop
   b5660:	000b5a14 	.word	0x000b5a14

000b5664 <_Z22__fetch_global_Serial1v>:
{
   b5664:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5666:	4d0e      	ldr	r5, [pc, #56]	; (b56a0 <_Z22__fetch_global_Serial1v+0x3c>)
   b5668:	7829      	ldrb	r1, [r5, #0]
   b566a:	f3bf 8f5b 	dmb	ish
   b566e:	f011 0401 	ands.w	r4, r1, #1
{
   b5672:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5674:	d111      	bne.n	b569a <_Z22__fetch_global_Serial1v+0x36>
   b5676:	4628      	mov	r0, r5
   b5678:	f7ff f90f 	bl	b489a <__cxa_guard_acquire>
   b567c:	b168      	cbz	r0, b569a <_Z22__fetch_global_Serial1v+0x36>
   b567e:	a801      	add	r0, sp, #4
   b5680:	f7ff ffd6 	bl	b5630 <_Z20acquireSerial1Bufferv>
   b5684:	aa01      	add	r2, sp, #4
   b5686:	4621      	mov	r1, r4
   b5688:	4806      	ldr	r0, [pc, #24]	; (b56a4 <_Z22__fetch_global_Serial1v+0x40>)
   b568a:	f7ff fde3 	bl	b5254 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b568e:	4628      	mov	r0, r5
   b5690:	f7ff f908 	bl	b48a4 <__cxa_guard_release>
   b5694:	4804      	ldr	r0, [pc, #16]	; (b56a8 <_Z22__fetch_global_Serial1v+0x44>)
   b5696:	f000 f84b 	bl	b5730 <atexit>
    return serial1;
}
   b569a:	4802      	ldr	r0, [pc, #8]	; (b56a4 <_Z22__fetch_global_Serial1v+0x40>)
   b569c:	b007      	add	sp, #28
   b569e:	bd30      	pop	{r4, r5, pc}
   b56a0:	2003e728 	.word	0x2003e728
   b56a4:	2003e72c 	.word	0x2003e72c
   b56a8:	000b562f 	.word	0x000b562f

000b56ac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b56ac:	4770      	bx	lr
	...

000b56b0 <_Z17acquireWireBufferv>:
{
   b56b0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b56b2:	4b0a      	ldr	r3, [pc, #40]	; (b56dc <_Z17acquireWireBufferv+0x2c>)
   b56b4:	6003      	str	r3, [r0, #0]
   b56b6:	2301      	movs	r3, #1
{
   b56b8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b56ba:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b56bc:	4908      	ldr	r1, [pc, #32]	; (b56e0 <_Z17acquireWireBufferv+0x30>)
   b56be:	2020      	movs	r0, #32
   b56c0:	f000 f834 	bl	b572c <_ZnajRKSt9nothrow_t>
	};
   b56c4:	2520      	movs	r5, #32
   b56c6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b56c8:	4905      	ldr	r1, [pc, #20]	; (b56e0 <_Z17acquireWireBufferv+0x30>)
	};
   b56ca:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b56cc:	4628      	mov	r0, r5
   b56ce:	f000 f82d 	bl	b572c <_ZnajRKSt9nothrow_t>
	};
   b56d2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b56d6:	4620      	mov	r0, r4
   b56d8:	bd38      	pop	{r3, r4, r5, pc}
   b56da:	bf00      	nop
   b56dc:	00010018 	.word	0x00010018
   b56e0:	000b5a14 	.word	0x000b5a14

000b56e4 <_Z19__fetch_global_Wirev>:
{
   b56e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b56e6:	4d0e      	ldr	r5, [pc, #56]	; (b5720 <_Z19__fetch_global_Wirev+0x3c>)
   b56e8:	7829      	ldrb	r1, [r5, #0]
   b56ea:	f3bf 8f5b 	dmb	ish
   b56ee:	f011 0401 	ands.w	r4, r1, #1
{
   b56f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b56f4:	d111      	bne.n	b571a <_Z19__fetch_global_Wirev+0x36>
   b56f6:	4628      	mov	r0, r5
   b56f8:	f7ff f8cf 	bl	b489a <__cxa_guard_acquire>
   b56fc:	b168      	cbz	r0, b571a <_Z19__fetch_global_Wirev+0x36>
   b56fe:	4668      	mov	r0, sp
   b5700:	f7ff ffd6 	bl	b56b0 <_Z17acquireWireBufferv>
   b5704:	466a      	mov	r2, sp
   b5706:	4621      	mov	r1, r4
   b5708:	4806      	ldr	r0, [pc, #24]	; (b5724 <_Z19__fetch_global_Wirev+0x40>)
   b570a:	f7ff fde3 	bl	b52d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b570e:	4628      	mov	r0, r5
   b5710:	f7ff f8c8 	bl	b48a4 <__cxa_guard_release>
   b5714:	4804      	ldr	r0, [pc, #16]	; (b5728 <_Z19__fetch_global_Wirev+0x44>)
   b5716:	f000 f80b 	bl	b5730 <atexit>
	return wire;
}
   b571a:	4802      	ldr	r0, [pc, #8]	; (b5724 <_Z19__fetch_global_Wirev+0x40>)
   b571c:	b007      	add	sp, #28
   b571e:	bd30      	pop	{r4, r5, pc}
   b5720:	2003e744 	.word	0x2003e744
   b5724:	2003e748 	.word	0x2003e748
   b5728:	000b56ad 	.word	0x000b56ad

000b572c <_ZnajRKSt9nothrow_t>:
   b572c:	f7ff b8b1 	b.w	b4892 <_Znaj>

000b5730 <atexit>:
   b5730:	2300      	movs	r3, #0
   b5732:	4601      	mov	r1, r0
   b5734:	461a      	mov	r2, r3
   b5736:	4618      	mov	r0, r3
   b5738:	f000 b844 	b.w	b57c4 <__register_exitproc>

000b573c <memcpy>:
   b573c:	440a      	add	r2, r1
   b573e:	4291      	cmp	r1, r2
   b5740:	f100 33ff 	add.w	r3, r0, #4294967295
   b5744:	d100      	bne.n	b5748 <memcpy+0xc>
   b5746:	4770      	bx	lr
   b5748:	b510      	push	{r4, lr}
   b574a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b574e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5752:	4291      	cmp	r1, r2
   b5754:	d1f9      	bne.n	b574a <memcpy+0xe>
   b5756:	bd10      	pop	{r4, pc}

000b5758 <memset>:
   b5758:	4402      	add	r2, r0
   b575a:	4603      	mov	r3, r0
   b575c:	4293      	cmp	r3, r2
   b575e:	d100      	bne.n	b5762 <memset+0xa>
   b5760:	4770      	bx	lr
   b5762:	f803 1b01 	strb.w	r1, [r3], #1
   b5766:	e7f9      	b.n	b575c <memset+0x4>

000b5768 <srand>:
   b5768:	b538      	push	{r3, r4, r5, lr}
   b576a:	4b10      	ldr	r3, [pc, #64]	; (b57ac <srand+0x44>)
   b576c:	681d      	ldr	r5, [r3, #0]
   b576e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5770:	4604      	mov	r4, r0
   b5772:	b9b3      	cbnz	r3, b57a2 <srand+0x3a>
   b5774:	2018      	movs	r0, #24
   b5776:	f7ff fab7 	bl	b4ce8 <malloc>
   b577a:	4602      	mov	r2, r0
   b577c:	63a8      	str	r0, [r5, #56]	; 0x38
   b577e:	b920      	cbnz	r0, b578a <srand+0x22>
   b5780:	4b0b      	ldr	r3, [pc, #44]	; (b57b0 <srand+0x48>)
   b5782:	480c      	ldr	r0, [pc, #48]	; (b57b4 <srand+0x4c>)
   b5784:	2142      	movs	r1, #66	; 0x42
   b5786:	f7ff fabf 	bl	b4d08 <__assert_func>
   b578a:	490b      	ldr	r1, [pc, #44]	; (b57b8 <srand+0x50>)
   b578c:	4b0b      	ldr	r3, [pc, #44]	; (b57bc <srand+0x54>)
   b578e:	e9c0 1300 	strd	r1, r3, [r0]
   b5792:	4b0b      	ldr	r3, [pc, #44]	; (b57c0 <srand+0x58>)
   b5794:	6083      	str	r3, [r0, #8]
   b5796:	230b      	movs	r3, #11
   b5798:	8183      	strh	r3, [r0, #12]
   b579a:	2100      	movs	r1, #0
   b579c:	2001      	movs	r0, #1
   b579e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b57a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b57a4:	2200      	movs	r2, #0
   b57a6:	611c      	str	r4, [r3, #16]
   b57a8:	615a      	str	r2, [r3, #20]
   b57aa:	bd38      	pop	{r3, r4, r5, pc}
   b57ac:	2003e638 	.word	0x2003e638
   b57b0:	000b5a15 	.word	0x000b5a15
   b57b4:	000b5a2c 	.word	0x000b5a2c
   b57b8:	abcd330e 	.word	0xabcd330e
   b57bc:	e66d1234 	.word	0xe66d1234
   b57c0:	0005deec 	.word	0x0005deec

000b57c4 <__register_exitproc>:
   b57c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b57c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5884 <__register_exitproc+0xc0>
   b57cc:	4606      	mov	r6, r0
   b57ce:	f8d8 0000 	ldr.w	r0, [r8]
   b57d2:	461f      	mov	r7, r3
   b57d4:	460d      	mov	r5, r1
   b57d6:	4691      	mov	r9, r2
   b57d8:	f000 f856 	bl	b5888 <__retarget_lock_acquire_recursive>
   b57dc:	4b25      	ldr	r3, [pc, #148]	; (b5874 <__register_exitproc+0xb0>)
   b57de:	681c      	ldr	r4, [r3, #0]
   b57e0:	b934      	cbnz	r4, b57f0 <__register_exitproc+0x2c>
   b57e2:	4c25      	ldr	r4, [pc, #148]	; (b5878 <__register_exitproc+0xb4>)
   b57e4:	601c      	str	r4, [r3, #0]
   b57e6:	4b25      	ldr	r3, [pc, #148]	; (b587c <__register_exitproc+0xb8>)
   b57e8:	b113      	cbz	r3, b57f0 <__register_exitproc+0x2c>
   b57ea:	681b      	ldr	r3, [r3, #0]
   b57ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b57f0:	6863      	ldr	r3, [r4, #4]
   b57f2:	2b1f      	cmp	r3, #31
   b57f4:	dd07      	ble.n	b5806 <__register_exitproc+0x42>
   b57f6:	f8d8 0000 	ldr.w	r0, [r8]
   b57fa:	f000 f847 	bl	b588c <__retarget_lock_release_recursive>
   b57fe:	f04f 30ff 	mov.w	r0, #4294967295
   b5802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5806:	b34e      	cbz	r6, b585c <__register_exitproc+0x98>
   b5808:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b580c:	b988      	cbnz	r0, b5832 <__register_exitproc+0x6e>
   b580e:	4b1c      	ldr	r3, [pc, #112]	; (b5880 <__register_exitproc+0xbc>)
   b5810:	b923      	cbnz	r3, b581c <__register_exitproc+0x58>
   b5812:	f8d8 0000 	ldr.w	r0, [r8]
   b5816:	f000 f838 	bl	b588a <__retarget_lock_release>
   b581a:	e7f0      	b.n	b57fe <__register_exitproc+0x3a>
   b581c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5820:	f7ff fa62 	bl	b4ce8 <malloc>
   b5824:	2800      	cmp	r0, #0
   b5826:	d0f4      	beq.n	b5812 <__register_exitproc+0x4e>
   b5828:	2300      	movs	r3, #0
   b582a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b582e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5832:	6863      	ldr	r3, [r4, #4]
   b5834:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5838:	2201      	movs	r2, #1
   b583a:	409a      	lsls	r2, r3
   b583c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5840:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5844:	4313      	orrs	r3, r2
   b5846:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b584a:	2e02      	cmp	r6, #2
   b584c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5850:	bf02      	ittt	eq
   b5852:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5856:	4313      	orreq	r3, r2
   b5858:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b585c:	6863      	ldr	r3, [r4, #4]
   b585e:	f8d8 0000 	ldr.w	r0, [r8]
   b5862:	1c5a      	adds	r2, r3, #1
   b5864:	3302      	adds	r3, #2
   b5866:	6062      	str	r2, [r4, #4]
   b5868:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b586c:	f000 f80e 	bl	b588c <__retarget_lock_release_recursive>
   b5870:	2000      	movs	r0, #0
   b5872:	e7c6      	b.n	b5802 <__register_exitproc+0x3e>
   b5874:	2003e7e8 	.word	0x2003e7e8
   b5878:	2003e75c 	.word	0x2003e75c
   b587c:	00000000 	.word	0x00000000
   b5880:	000b4ce9 	.word	0x000b4ce9
   b5884:	2003e69c 	.word	0x2003e69c

000b5888 <__retarget_lock_acquire_recursive>:
   b5888:	4770      	bx	lr

000b588a <__retarget_lock_release>:
   b588a:	4770      	bx	lr

000b588c <__retarget_lock_release_recursive>:
   b588c:	4770      	bx	lr

000b588e <link_code_end>:
	...

000b5890 <dynalib_user>:
   b5890:	481d 000b 4859 000b 4881 000b 4885 000b     .H..YH...H...H..
   b58a0:	0000 0000                                   ....

000b58a4 <_ZTVN5spark13EthernetClassE>:
	...
   b58ac:	4d87 000b 4d7d 000b 4d73 000b 4d69 000b     .M..}M..sM..iM..
   b58bc:	4d5d 000b 4d51 000b 53cd 000b 53d5 000b     ]M..QM...S...S..
   b58cc:	4d45 000b 4d3d 000b 4d33 000b 4d29 000b     EM..=M..3M..)M..
   b58dc:	5405 000b 7061 0070 5925 252d 2d6d 6425     .T..app.%Y-%m-%d
   b58ec:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b58fc:	6d69 0065                                   ime.

000b5900 <_ZTV9IPAddress>:
	...
   b5908:	4ff9 000b 4fe9 000b 4feb 000b               .O...O...O..

000b5914 <_ZTV9USBSerial>:
	...
   b591c:	50df 000b 5147 000b 511d 000b 4ded 000b     .P..GQ...Q...M..
   b592c:	510f 000b 50e1 000b 50f1 000b 5141 000b     .Q...P...P..AQ..
   b593c:	5101 000b 50d9 000b                         .Q...P..

000b5944 <_ZTV11USARTSerial>:
	...
   b594c:	51d9 000b 5245 000b 521d 000b 4ded 000b     .Q..ER...R...M..
   b595c:	51ed 000b 5209 000b 51fb 000b 5217 000b     .Q...R...Q...R..
   b596c:	51db 000b 51df 000b                         .Q...Q..

000b5974 <_ZTV7TwoWire>:
	...
   b597c:	527d 000b 52c7 000b 529f 000b 527f 000b     }R...R...R...R..
   b598c:	52a7 000b 52af 000b 52b7 000b 52bf 000b     .R...R...R...R..

000b599c <_ZTVN5spark9WiFiClassE>:
	...
   b59a4:	536f 000b 5365 000b 535b 000b 5311 000b     oS..eS..[S...S..
   b59b4:	534f 000b 5343 000b 53cd 000b 53d5 000b     OS..CS...S...S..
   b59c4:	5337 000b 532f 000b 5325 000b 531b 000b     7S../S..%S...S..
   b59d4:	5405 000b                                   .T..

000b59d8 <_ZTVN5spark12NetworkClassE>:
	...
   b59e0:	538d 000b 5397 000b 53a1 000b 53ab 000b     .S...S...S...S..
   b59f0:	53b5 000b 53c1 000b 53cd 000b 53d5 000b     .S...S...S...S..
   b5a00:	53dd 000b 53e9 000b 53f1 000b 53fb 000b     .S...S...S...S..
   b5a10:	5405 000b                                   .T..

000b5a14 <_ZSt7nothrow>:
   b5a14:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5a24:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5a34:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5a44:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5a54:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5a64:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5a74:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5a84:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5a94:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5aa4:	646e 632e                                    nd.c.

000b5aa9 <link_const_data_end>:
   b5aa9:	00          	.byte	0x00
	...

000b5aac <link_constructors_location>:
   b5aac:	000b4969 	.word	0x000b4969
   b5ab0:	000b4d91 	.word	0x000b4d91
   b5ab4:	000b4db9 	.word	0x000b4db9
   b5ab8:	000b4ddd 	.word	0x000b4ddd
   b5abc:	000b4e81 	.word	0x000b4e81
   b5ac0:	000b4e91 	.word	0x000b4e91
   b5ac4:	000b4ea5 	.word	0x000b4ea5
   b5ac8:	000b5379 	.word	0x000b5379
   b5acc:	000b54dd 	.word	0x000b54dd
